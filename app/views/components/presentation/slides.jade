element(name="ui-slides", \attributes="")
    template
        include ../../../assets/stylus/components/presentation/slides.styl

        .ui-slides(backdrop="{{backdrop}}")
            content#content

    script.
        Polymer.register(this, {
            backdrop: true,
            index: 0,

            /**
             * slide states
             * @type {Object}
             */
            states: {
                '-2': 'far-past',
                '-1': 'past',
                '0': 'current',
                '1': 'next',
                '2': 'far-next'
            },

            /**
             * polymer init
             */
            ready: function(){
                this.slides = this.$.content.getDistributedNodes();
                document.addEventListener('keydown', this.onKeyDown.bind(this), false);
                this.update();
            },

            /**
             * set index to next
             */
            next: function(){
                if(this.index >= this.slides.length -1){
                    console.log('at end');
                    return;
                }
                if(this.slides[this.index].nextItem()){
                    return;
                }
                this.index++;
                this.update();
            },

            /**
             * on key down handler
             */
            onKeyDown: function(e){
                if(/^(input|textarea)$/i.test(e.target.nodeName) || e.target.isContentEditable){
                    return false;
                }

                switch(e.keyCode){
                    case 32: // space
                    case 34: // pagedown
                    case 39: // right arrow
                    case 40: // down arrow
                        this.next();
                        e.preventDefault();
                        break;

                    case 8:  // backspace
                    case 33: // pageup
                    case 37: // left arrow
                    case 38: // up arrow
                      this.previous();
                      e.preventDefault();
                      break;
                }
            },

            /**
             * set index to previous
             */
            previous: function(){
                if(this.index === 0){
                    console.log('at beginning');
                    return;
                }
                this.index--;
                this.update();
            },

            /**
             * update slidedeck
             */
            update: function(){
                var scope = this;

                this.slides.forEach(function(i, index){
                    var state = scope.states[index - scope.index];

                    i.state = state ? 'ui-slide-'+state : '';

                    if(state === 'current'){
                        i.loaded = true;
                        scope.backdrop = i.backdrop;
                    }
                });
            }

        });