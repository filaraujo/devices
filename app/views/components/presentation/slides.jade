element(name="ui-slides", \attributes="")
    template
        include ../../../assets/stylus/components/presentation/slides.styl

        .ui-slides(backdrop="{{backdrop}}", overview="{{overview}}", presentor="{{presentor}}")
            .ui-slides-viewport#viewport
                content#content

    script.
        Polymer.register(this, {
            backdrop: true,
            index: 0,
            presentor: false,
            overview: false,
            timer: null,

            /**
             * slide states
             * @type {Object}
             */
            states: {
                '-2': 'far-past',
                '-1': 'past',
                '0': 'current',
                '1': 'next',
                '2': 'far-next'
            },

            /**
             * polymer init
             */
            ready: function(){
                this.slides = this.$.content.getDistributedNodes();
                this.presentor = !!window.opener;

                // event binding
                document.addEventListener('keydown', this.onKeyDown.bind(this), false);
                window.addEventListener('popstate', this.onPopState.bind(this), false);
                window.addEventListener('message', this.onMessage.bind(this), false);

                // init states
                this.onPopState();
                this.updateSlides();
            },

            /**
             * set index to next
             */
            nextSlide: function(){
                if(this.index >= this.slides.length -1){
                    return;
                }
                if(this.slides[this.index].nextItem()){
                    return;
                }
                this.index++;
                window.history.pushState({hash: (this.index+1)}, "", "#"+(this.index+1));
                this.updateSlides();
            },

            /**
             * on key down handler
             */
            onKeyDown: function(e){
                if(/^(input|textarea)$/i.test(e.target.nodeName) || e.target.isContentEditable){
                    return false;
                }

                if(this.presentor){
                    // prevent keys in presentor
                    if([80, 79].indexOf(e.keyCode) >= 0){
                        return false;
                    }
                    window.opener.postMessage({keyCode: e.keyCode}, '*');
                }

                switch(e.keyCode){
                    case 32: // space
                    case 34: // pagedown
                    case 39: // right arrow
                    case 40: // down arrow
                        this.nextSlide();
                        e.preventDefault();
                        break;

                    case 8:  // backspace
                    case 33: // pageup
                    case 37: // left arrow
                    case 38: // up arrow
                        this.previousSlide();
                        e.preventDefault();
                        break;

                    case 79: // letter O
                        this.toggleOverview();
                        break;

                    case 80: // letter P
                        this.toggleController();
                        break;
                }
            },

            onMessage: function(e){
                var data = e.data,
                    evt;

                    console.log(data.keyCode)

                if(data.keyCode){
                    evt = document.createEvent('Event');
                    evt.initEvent('keydown', true, true);
                    evt.keyCode = data.keyCode;
                    document.dispatchEvent(evt);
                }
            },

            /**
             * on pop state handler
             */
            onPopState: function(e){
                var hash = parseInt(document.location.hash.substr(1)),
                    state = 'replaceState';

                switch(true){
                    case !hash:
                    case hash <= 0:
                        hash = 1;
                        break;
                    case hash > this.slides.length:
                        hash = this.slides.length;
                        break;
                    default:
                        state = 'pushState';
                        break;
                }

                window.history[state]({hash: hash}, "", "#"+hash);
                this.index = hash-1;

                // prevent onload popstate triggering update
                if(e){
                    this.updateSlides();
                }
            },

            /**
             * set index to previous
             */
            previousSlide: function(){
                if(this.index === 0){
                    return;
                }
                this.index--;
                window.history.pushState({hash: (this.index+1)}, "", "#"+(this.index+1));
                this.updateSlides();
            },

            offsetSlides: function(){
                var scope = this;

                this.slides.forEach(function(i, index){
                    i.offset = (index - scope.index) * 105;
                });

                this.previousIndex = this.index;
                this.$.viewport.setAttribute('style','-webkit-transform: translate3d(0%,0,-2000px); transform: translate3d(0%,0,-2000px); -webkit-transition: none; transition: none;');

                // set timeout to remove transform
                if(!this.overview){
                    setTimeout(function(){
                        scope.slides.forEach(function(i, index){
                            i.offset = 0;
                        });
                        scope.$.viewport.removeAttribute('style');
                    }, 100);
                }
            },

            /**
             * toggle on overview mode
             */
            toggleOverview: function(){
                this.overview = !this.overview;
                this.offsetSlides();
                this.updateSlides();
            },

            /**
             * toggle controller
             */
            toggleController: function(){
                this.controlled = !this.controlled;

                if(this.controlled){
                    this.popup = window.open(location.href, 'controller', 'menubar=no,location=yes,resizable=yes,scrollbars=no,status=no');
                    return;
                }
                this.popup.close();
            },

            /**
             * update slidedeck
             */
            updateSlides: function(){
                var scope = this,
                    overviewOffset;

                clearTimeout(this.timer);

                this.slides.forEach(function(i, index){
                    var state = scope.states[index - scope.index];

                    i.state = state ? 'ui-slide-'+state : '';
                    i.overview = scope.overview;

                    if(state === 'current'){
                        i.loaded = true;
                        scope.backdrop = i.backdrop;
                    }
                });

                if(this.overview){
                    overviewOffset = (this.index - this.previousIndex) * -105;
                    this.$.viewport.setAttribute('style','-webkit-transform: translate3d('+overviewOffset+'%,0,-2000px); transform: translate3d('+overviewOffset+'%,0,-2000px);');
                }
            }
        });